# import random
from __future__ import print_function
import os.path
import PIL
import PIL.Image as image


# import matplotlib.pyplot as plt

# possible_quotes = ['Family is not an important thing. Its everything.', 'The most important thing in the world is family and love.', 'You dont choose your family. They are Gods gift to you, as you are to them.']
# quote_used = possible_quotes[random.randint(1,3)]

def frame(original_image, color, frame_width):
    '''Draws a frame around the specified image original_image, in the color and width specified.
    Width is defined as frame_width, 0 < frame_width < 1.
    Color is defined as a three-tuple r,g,b'''
    
    #Defines size of frame
    img = image.open(original_image)
    width,height = img.size
    thickness = int(frame_width * min(width, height))
    
    
    #Set up color palette and new frame
    r,g,b = color
    frame_mask = image.new('RGBA', (width, height), (127, 0, 127, 0))
    drawing_layer = PIL.ImageDraw.Draw(frame_mask)
    
    #Draw squares to outline frame
    drawing_layer.rectangle((0,0,width,thickness), fill=(r,g,b,255))#top rectangle
    drawing_layer.rectangle((0,height-thickness,width,height), fill=(r,g,b,255)) #bottom rectangle
    drawing_layer.rectangle((width,0,width-thickness,height), fill=(r,g,b,255)) #right rectangle
    drawing_layer.rectangle((0,0,thickness,height), fill=(r,g,b,255)) #left rectangle
    drawing_layer.rectangle((0,0,thickness,thickness), fill=(255-r,255-g,255-b,0))#top left square
    drawing_layer.rectangle((0,height,thickness,height-thickness), fill=(255-r,255-g,255-b,0))#bottom left rectangle
    drawing_layer.rectangle((width,thickness,width-thickness,0), fill=(255-r,255-g,255-b,0))#top right rectangle
    drawing_layer.rectangle((width,height,width-thickness,height-thickness), fill=(255-r,255-g,255-b,0))#bottom right square
    
    #Adds the crest to bottom
    crest = image.open('crest.jpeg')
    resized_crest = crest.resize((thickness,thickness))
    crest_copy = resized_crest.copy()
    #top left crest
    #frame_mask.paste(resized_crest, (width-thickness,0))#top right crest
    #frame_mask.paste(resized_crest, (0,height-thickness))#bottom left crest
    #frame_mask.paste(resized_crest, (height-thickness,width-thickness))#bottom right crest
    
    #Returns Pictures
    frame_image = image.new('RGBA', (width,height), (r,g,b,255))
    img = image.open(original_image)
    result = img.copy()
    result.paste(frame_image, (0,0), mask=frame_mask)
    result.paste(crest_copy, (((width/2)-(thickness/2)),height-(thickness)))
    result.save('edited_version.jpeg')
    return result
    
    #Adds quote to bottom
        #Decided not to add quote to the bottom due to time constraints
        
def get_images(directory=None):
    """ Returns PIL.Image objects for all the images in directory.
    
    If directory is not specified, uses current directory.
    Returns a 2-tuple containing 
    a list with a  PIL.Image object for each image file in root_directory, and
    a list with a string filename for each image file in root_directory
    """
    
    if directory == None:
        directory = os.getcwd() # Use working directory if unspecified
        
    image_list = [] # Initialize aggregaotrs
    file_list = []
    
    directory_list = os.listdir(directory) # Get list of files
    for entry in directory_list:
        absolute_filename = os.path.join(directory, entry)
        try:
            image = PIL.Image.open(absolute_filename)
            file_list += [entry]
            image_list += [image]
        except IOError:
            pass # do nothing with errors tying to open non-images
    return image_list, file_list
    
def frame_all_images(directory=None, color=(255,0,0), frame_width=0.10):
    """ Saves a modfied version of each image in directory.
    
    Uses current directory if no directory is specified. 
    Places images in subdirectory 'modified', creating it if it does not exist.
    New image files are of type PNG and have transparent rounded corners."""
    
    if directory == None:
        directory = os.getcwd() # Use working directory if unspecified
        
    # Create a new directory 'modified'
    new_directory = os.path.join(directory, 'modified')
    try:
        os.mkdir(new_directory)
    except OSError:
        pass # if the directory already exists, proceed  
    
    # Load all the images
    image_list, file_list = get_images(directory)  

    # Go through the images and save modified versions
    for n in range(len(image_list)):
        # Parse the filename
        return n
        filename, filetype = file_list[n].split('.')
        return n
        
        # Round the corners with default percent of radius
        curr_image = image_list[n]
        new_image = frame(curr_image) 
        
        # Save the altered image, suing PNG to retain transparency
        new_image_filename = os.path.join(new_directory, filename + '.png')
        new_image.save(new_image_filename)    